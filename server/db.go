package main

import (
	"database/sql"
	"fmt"
	"os"

	_ "github.com/lib/pq"
)

type user_struct struct {
	ID   int    `json:"id"`
	Name string `json:"name"`
}

var DB *sql.DB

func checkErr(err error) {
	if err != nil {
		panic(err)
	}
}

func initDB() {
	DB_PATH := os.Getenv("DB_PATH")
	DB_USER := os.Getenv("DB_USER")
	DB_PASSWORD := os.Getenv("DB_PASSWORD")
	DB_NAME := os.Getenv("DB_NAME")

	dbinfo := fmt.Sprintf("user=%s password=%s dbname=%s sslmode=disable host=%s",
		DB_USER, DB_PASSWORD, DB_NAME, DB_PATH)
	db, err := sql.Open("postgres", dbinfo)
	checkErr(err)
	DB = db

	err = DB.Ping()
	if err != nil {
		checkErr(err)
	}

	_, err = DB.Query(`CREATE TABLE IF NOT EXISTS users (
		id int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
		name VARCHAR(50) NOT null);`)
	checkErr(err)

}

func closeDB() {
	DB.Close()
}

func fetchUsers() []user_struct {
	rows, err := DB.Query("SELECT * FROM users")
	checkErr(err)
	defer rows.Close()
	var users []user_struct
	for rows.Next() {
		var user user_struct
		rows.Scan(
			&user.ID,
			&user.Name,
		)
		users = append(users, user)
	}
	return users
}

func createUser(name string) {
	err := DB.QueryRow("INSERT INTO users(name) VALUES($1)", name).Scan()
	if err != sql.ErrNoRows {
		checkErr(err)
	}
}

func updateUser(id string, name string) {
	err := DB.QueryRow("UPDATE users SET name=$1 WHERE id=$2", name, id).Scan()
	if err != sql.ErrNoRows {
		checkErr(err)
	}
}

func deleteUser(id string) {
	err := DB.QueryRow("DELETE FROM users WHERE id=$1", id).Scan()
	if err != sql.ErrNoRows {
		checkErr(err)
	}
}
